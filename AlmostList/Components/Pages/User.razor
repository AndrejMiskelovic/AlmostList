@page "/User/{Id:int?}"

@using AlmostList.Client
@using AlmostList.Client.Models
@using AlmostList.Client.Models.Enums
@using AlmostList.Client.Models.Requests
@using AlmostList.Client.Models.Responses
@using AlmostList.Components.Pages.Components
@using AlmostList.Utils
@using GraphQL
@using Newtonsoft.Json
@using Sve.Blazor.InfiniteScroll.Components
@inject BaseClient baseClient
@inject NavigationManager UriHelper


@if (Id != null)
{
	<Tabs OnTabChanged="OnTabChanged">
		<Tab Text="Overview" Value="User">

			<div class="">

				@if (@render)
				{
					<div class="header">
						<img class="bannerimage" src="@UserReponse.Data.User.BannerImage" />
						<img class="coverImage" src="@UserReponse.Data.User.Avatar.Large" />
						<div class="headerInfo">
							<text class="title">@UserReponse.Data.User.Name</text>
							@* <text class="donatorBadge">@UserReponse.Data.User.DonatorBadge</text> *@
						</div>
					</div>
					<div class="userAbout">
						@UserReponse.Data.User.About
					</div>
					<div class="userStatistics">
						<div class="statsTable">
							<div>
								@UserReponse.Data.User.Statistics.Anime.Count
								<label>Total Anime</label>
							</div>
							<div>
								@String.Format("{0:0.00}", TimeSpan.FromMinutes(UserReponse.Data.User.Statistics.Anime.MinutesWatched).TotalDays)
								<label>Days watched</label>
							</div>
							<div>
								@UserReponse.Data.User.Statistics.Anime.EpisodesWatched
								<label>Episodes Watched</label>
							</div>
						</div>
						<div class="statsTable">
							<div>
								@UserReponse.Data.User.Statistics.Manga.Count
								<label>Total Manga</label>
							</div>
							<div>
								@UserReponse.Data.User.Statistics.Manga.ChaptersRead
								<label>Chapters Read</label>
							</div>
							<div>
								@UserReponse.Data.User.Statistics.Manga.VolumesRead
								<label>Volumes Read</label>
							</div>
						</div>
					</div>
					<div class="userTitles">
						<div class="typeName"><input type="checkbox"> Anime <div class="arrow">➤</div></div>
						<div class="titleWrapper">

							@foreach (var item in @UserReponse.Data.User.Favourites.Anime.Nodes)
							{
								<div class="mediaCard" @onclick="(() => OpenMedia(item.Id))">
									<img src="@item.CoverImage.Large" />
									<div class="pageMediaInfo">
										<div class="title">
											@item.Title.UserPreferred
										</div>
									</div>
								</div>
							}
						</div>
					</div>
					<div class="userTitles">
						<div class="typeName"><input type="checkbox"> Manga <div class="arrow">➤</div></div>
						<div class="titleWrapper">
							@foreach (var item in @UserReponse.Data.User.Favourites.Manga.Nodes)
							{
								<div class="mediaCard" @onclick="(() => OpenMedia(item.Id))">
									<img src="@item.CoverImage.Large" />
									<div class="pageMediaInfo">
										<div class="title">
											@item.Title.UserPreferred
										</div>
									</div>
								</div>
							}
						</div>
					</div>
				}
			</div>

		</Tab>


		<Tab Text="@MediaType.ANIME.GetDisplayName()" Value="@MediaType.ANIME.ToString()">

			@if (@render)
			{
				@foreach (var list in @UserMediaResponse.Data.MediaListCollection.Lists)
				{
					<div class="typeWrapper">
						<div class="typeName"><input type="checkbox"> @list.Name <div class="arrow">➤</div></div>
						<div class="typeCards">
							@foreach (var item in list.Entries)
							{
								<div class="mediaCard" @onclick="(() => OpenMedia(item.Media.Id))">
									<img src="@item.Media.CoverImage.Large" />
									<div class="pageMediaInfo">
										<div class="title">
											@item.Media.Title.UserPreferred
										</div>
									</div>
								</div>
							}
						</div>
					</div>
				}
			}

		</Tab>


		<Tab Text="@MediaType.MANGA.GetDisplayName()" Value="@MediaType.MANGA.ToString()">

			@if (@render)
			{
				@foreach (var list in @UserMediaResponse.Data.MediaListCollection.Lists)
				{
					<div class="typeWrapper">
						<div class="typeName"><input type="checkbox"> @list.Name <div class="arrow">➤</div></div>
						<div class="typeCards">

							@foreach (var item in list.Entries)
							{
								<div class="mediaCard" @onclick="(() => OpenMedia(item.MediaId.Value))">
									<img src="@item.Media.CoverImage.Large" />
									<div class="pageMediaInfo">
										<div class="title">
											@item.Media.Title.UserPreferred
										</div>
									</div>
								</div>
							}
						</div>
					</div>
				}
			}

		</Tab>
	</Tabs>
}
else
{
	<div>Ops... Something went wrong</div>
}




@code {

	[Parameter]
	public int? Id { get; set; }


	bool render = false;
	GraphQLResponse<UserMediaResponse> UserMediaResponse = new GraphQLResponse<UserMediaResponse>();
	PageMediaRequest PageMediaRequest = new PageMediaRequest();
	GraphQLResponse<UserResponse> UserReponse = new GraphQLResponse<UserResponse>();

	private void OpenMedia(int id)
	{
		UriHelper.NavigateTo($"/Media/{id}");
	}

	public async Task OnTabChanged(Tab tab)
	{
		render = false;
		MakeRequest(true, null, tab);
	}
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		MakeRequest(firstRender);
	}
	private async void MakeRequest(bool firstRender, PageMediaRequest? pageMediaRequest = null, Tab? tab = null)
	{
		if (firstRender)
		{
			if (tab != null)
			{
				switch (tab.Value)
				{
					case "ANIME":
						UserMediaResponse = await baseClient.GetUserMedia(MediaType.ANIME, Id);
						break;
					case "MANGA":
						UserMediaResponse = await baseClient.GetUserMedia(MediaType.MANGA, Id);
						break;
					default:
						UserReponse = await baseClient.GetUser(Id);
						break;
				}

			}
			else
			{
				UserReponse = await baseClient.GetUser(Id);
			}
			render = true;
			StateHasChanged();
		}
	}
	// private async Task FetchPageData()
	// {
	// 	if (PageMediaResponse.Data.Page.PageInfo.CurrentPage < PageMediaResponse.Data.Page.PageInfo.LastPage)
	// 	{
	// 		PageMediaRequest.Page = +1;
	// 		var a = await baseClient.GetUserMedia(Id, );
	// 		PageMediaResponse.Data.Page.Media.AddRange(a.Data.Page.Media.ToArray());
	// 		PageMediaResponse.Data.Page.PageInfo = a.Data.Page.PageInfo;
	// 	}
		// }
}
