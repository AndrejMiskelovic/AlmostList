@using AlmostList.Client
@using AlmostList.Client.Models.Enums
@using AlmostList.Client.Models.Properties.Common
@using AlmostList.Client.Models.Properties.Media
@using AlmostList.Utils
@inject BaseClient baseClient
@inject NavigationManager UriHelper

<div>


	<div class="popupInputGroup">
		<div class="mediaPopupLabel">Status</div>
		<select @bind="MediaList.Status">
			<option disabled selected value hidden>Status</option>

			@foreach (MediaListStatus format in Enum.GetValues(typeof(MediaListStatus)))
			{
				<option value="@format">@format.GetDisplayName()</option>
			}
		</select>
		<div class="favoriteIcon @(IsFavorite ? "favorited" : "")" @onclick="() => AddToFavorite()"></div>
	</div>


	<div class="popupGroupedGroup">
		<div class="popupInputGroup">
			<div class="mediaPopupLabel">Score</div>
			<input type="number" min="0" @bind="MediaList.Score" max="10" step="0.5" />
		</div>

		<div class="popupInputGroup">
			<div class="mediaPopupLabel">Progress</div>
			<input type="number" min="0" @bind="MediaList.Progress" max="maxEpisodes" />
		</div>
	</div>

	<div class="popupGroupedGroup">
		<div class="popupInputGroup">
			<div class="mediaPopupLabel">Started At</div>
			<InputDate ValueExpression="@(()=>startedAt)"
					   Value="startedAt"
					   ValueChanged="@((DateTime? value) => StartAt(value))" />
		</div>

		<div class="popupInputGroup">
			<div class="mediaPopupLabel">Completed At</div>
			<InputDate ValueExpression="@(()=>completedAt)"
					   Value="completedAt"
					   ValueChanged="@((DateTime? value) => FinishAt(value))" />
		</div>
	</div>

	<div class="popupInputGroup">
		<div class="mediaPopupLabel">Re-watched</div>
		<input type="number" min="0" @bind="MediaList.Repeat" step="1" />
	</div>

	<div class="popupInputGroup">
		<div class="mediaPopupLabel">Note</div>
		<input type="note" @bind="MediaList.Notes" />
	</div>


	@if (MediaList.CustomLists != null)
	{
		@foreach (var item in MediaList.CustomLists)
		{
			<div class="flexpopupGroup">
				<label for="@item.Key" class="mediaPopupLabel">@item.Key</label>
				<input type="checkbox" id="@item.Key" checked="@item.Value" @onchange="() =>AddCustomList(item.Key)" />
			</div>
		}
		<div class="flexpopupGroup">

			<label for="hidden" class="mediaPopupLabel">Hidden from status lists</label>
			<input type="checkbox" id="hidden" @bind="MediaList.HiddenFromStatusLists" />
		</div>
	}
	<div class="flexpopupGroup">

		<label for="private" class="mediaPopupLabel">Private</label>
		<input type="checkbox" id="private" @bind="MediaList.Private" />

	</div>

	<div class="popupBtnGroup">
		@if (MediaList.Id != null)
		{
			<button class='popupBtn popupDelete' @onclick="Delete">Delete</button>
		}
		<button class='popupBtn' @onclick="Save">Save</button>
	</div>



</div>

@code {
	private DateTime? startedAt { get; set; }
	private DateTime? completedAt { get; set; }
	[Parameter]
	public int? MaxEpisodes { get; set; }
	[Parameter]
	public bool IsFavorite { get; set; }
	[Parameter]
	public MediaType? Type { get; set; }

	[Parameter]
	public MediaList? MediaList { get; set; }

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			StateHasChanged();
		}
	}


	private async Task StartAt(DateTime? date)
	{
		startedAt = date;
		if (date == null)
		{
			MediaList.StartedAt = null;
			return;
		}
		MediaList.StartedAt = new FuzzyDate();
		MediaList.StartedAt.Year = date.GetValueOrDefault().Year;
		MediaList.StartedAt.Month = date.GetValueOrDefault().Month;
		MediaList.StartedAt.Day = date.GetValueOrDefault().Day;
	}
	private async Task FinishAt(DateTime? date)
	{
		completedAt = date;
		if (date == null)
		{
			MediaList.CompletedAt = null;
			return;
		}
		MediaList.CompletedAt = new FuzzyDate();
		MediaList.CompletedAt.Year = date.GetValueOrDefault().Year;
		MediaList.CompletedAt.Month = date.GetValueOrDefault().Month;
		MediaList.CompletedAt.Day = date.GetValueOrDefault().Day;
	}
	private void AddCustomList(string list)
	{
		if (MediaList.CustomLists == null)
			MediaList.CustomLists = new Dictionary<string, bool>();

		MediaList.CustomLists[list] = !(MediaList.CustomLists[list]);
	}
	private async Task Delete()
	{
		await baseClient.DeleteMediaEntry(MediaList.Id.Value);
		UriHelper.NavigateTo($"/Media/{MediaList.MediaId}", true);
	}
	private async Task Save()
	{
		await baseClient.UpdateMediaEntry(MediaList);
		UriHelper.NavigateTo($"/Media/{MediaList.MediaId}", true);

	}
	private async Task AddToFavorite()
	{
		IsFavorite = !IsFavorite;
		if (Type.HasValue)
		{
			if (Type == MediaType.ANIME)
				await baseClient.UpdateMediaFavoriteAnime(MediaList.MediaId);
			if (Type == MediaType.MANGA)
				await baseClient.UpdateMediaFavoriteManga(MediaList.MediaId);
		}
		StateHasChanged();
	}
}

