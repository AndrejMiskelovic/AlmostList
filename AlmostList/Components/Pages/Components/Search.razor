@using AlmostList.Client
@using AlmostList.Client.Models
@using AlmostList.Client.Models.Enums
@using AlmostList.Client.Models.Requests
@using System.Collections
@using AlmostList.Client.Models.Responses
@using AlmostList.Utils
@inject IJSRuntime JS;
@inject BaseClient baseClient

<CascadingValue Value="this">

	<div class="formWrapper">
		<label>Sort:</label>
		<select multiple @ref="_selectMediaSort" @onchange="OnSelectionMediaSort">
			@foreach (MediaSort sort in Enum.GetValues(typeof(MediaSort)))
			{
				<option value="@sort">@sort.GetDisplayName()</option>
			}
		</select>
		<label>Format:</label>
		<select multiple @ref="_selectMediaFormat" @onchange="OnSelectionMediaFormat">
			@if (PageMediaRequest.Type == MediaType.ANIME)
			{
				@foreach (MediaFormat format in Enum.GetValues(typeof(MediaFormat)).Cast<MediaFormat>().Where(role => MediaFormat.MUSIC >= role))
				{
					<option value="@format">@format.GetDisplayName()</option>
				}
			}
			else
			{
				@foreach (MediaFormat format in Enum.GetValues(typeof(MediaFormat)).Cast<MediaFormat>().Where(role => MediaFormat.MANGA <= role))
				{
					<option value="@format">@format.GetDisplayName()</option>
				}
			}
		</select>
		<label>Status:</label>
		<select multiple @ref="_selectMediaStatus" @onchange="OnSelectionMediaStatus">
			@foreach (MediaStatus status in Enum.GetValues(typeof(MediaStatus)))
			{
				<option value="@status">@status.GetDisplayName()</option>
			}
		</select>
		<label>Source:</label>
		<select multiple @ref="_selectMediaSource" @onchange="OnSelectionMediaSource">
			@foreach (MediaSource source in Enum.GetValues(typeof(MediaSource)))
			{
				<option value="@source">@source.GetDisplayName()</option>
			}
		</select>
		<label>Season:</label>
		<select @bind="PageMediaRequest.Season">
			<option selected value="">Any</option>
			@foreach (MediaSeason season in Enum.GetValues(typeof(MediaSeason)))
			{
				<option value="@season">@season.GetDisplayName()</option>
			}
		</select>
		<label>Country Of Origin:</label>
		<select @bind="PageMediaRequest.Season">
			<option selected value="">Any</option>
			@foreach (CountryCode countryCode in Enum.GetValues(typeof(CountryCode)))
			{
				<option value="@countryCode">@countryCode.GetDisplayName()</option>
			}
		</select>

		@if (GenresAndTags != null)
		{
			if (GenresAndTags.Genres != null)
			{

				<label>Genres:</label>
				<select multiple @ref="_selectMediaGenres" @onchange="OnSelectionMediaGenre">
					@foreach (var genre in GenresAndTags.Genres)
					{
						@if (genre != "Hentai" || genre != "Ecchi")
						{
							<option value="@genre">@genre</option>
						}
					}
				</select>
			}
			if (GenresAndTags.Tags != null)
			{
				<label>Tags:</label>
				<select multiple @ref="_selectMediaTags" @onchange="OnSelectionMediaTag">
					@foreach (var tag in GenresAndTags.Tags)
					{
						@if (tag.IsAdult == false)
						{
							<option value="@tag.Name">@tag.Name</option>
						}
					}
				</select>
			}
		}
		@if (baseClient.CurrentUser != null)
		{
			<label for="hideList">Hide My List:</label>
			<input type="checkbox" id="hideList" checked="@_hideList" @oninput="SetBoolFalseOrNull" />
			<label for="showList">Show Only My List:</label>
			<input type="checkbox" id="showList" checked="@_showList" @onchange="SetBoolTrueOrNull" />
		}
		<label class="center">Realese Date: </label> <div></div>
		<div class="center">From </div> 
		<input type="date" @bind="PageMediaRequest.StartDateGreater" placeholder="From" />
		<div class="center">To </div> 
		<input type="date" @bind="PageMediaRequest.StartDateLesser" placeholder="To" />
		<label class="center">Episodes:</label><div></div>
		<input type="number" @bind="PageMediaRequest.EpisodesGreater" placeholder="From" />
		<input type="number" @bind="PageMediaRequest.EpisodesLesser" placeholder="To" />
	</div>
</CascadingValue>
@code {

	[Parameter]
	public PageMediaRequestViewModel PageMediaRequest { get; set; }
	[Parameter]
	public GenresAndTagsResponse GenresAndTags { get; set; }

	private ElementReference _selectMediaFormat;
	private ElementReference _selectMediaStatus;
	private ElementReference _selectMediaSort;
	private ElementReference _selectMediaSource;
	private ElementReference _selectMediaGenres;
	private ElementReference _selectMediaTags;
	private bool _hideList;
	private bool _showList;

	private async Task OnSelectionMediaFormat(ChangeEventArgs eventArgs)
	{
		var selection = await GetSelections(_selectMediaFormat);
		if (selection.Any())
		{
			PageMediaRequest.FormatIn = new List<MediaFormat>();
			PageMediaRequest.FormatIn.AddRange(selection.Select(x => (MediaFormat)Enum.Parse(typeof(MediaFormat), x)).ToList());
		}
		else
		{
			PageMediaRequest.FormatIn = null;
		}
	}
	private async Task OnSelectionMediaSource(ChangeEventArgs eventArgs)
	{
		var selection = await GetSelections(_selectMediaSource);
		if (selection.Any())
		{
			PageMediaRequest.SourceIn = new List<MediaSource>();
			PageMediaRequest.SourceIn.AddRange(selection.Select(x => (MediaSource)Enum.Parse(typeof(MediaSource), x)).ToList());
		}
		else
		{
			PageMediaRequest.SourceIn = null;
		}
	}
	private async Task OnSelectionMediaStatus(ChangeEventArgs eventArgs)
	{
		var selection = await GetSelections(_selectMediaStatus);
		if (selection.Any())
		{
			PageMediaRequest.StatusIn = new List<MediaStatus>();
			PageMediaRequest.StatusIn.AddRange(selection.Select(x => (MediaStatus)Enum.Parse(typeof(MediaStatus), x)).ToList());
		}
		else
		{
			PageMediaRequest.StatusIn = null;
		}
	}
	private async Task OnSelectionMediaSort(ChangeEventArgs eventArgs)
	{
		var selection = await GetSelections(_selectMediaSort);
		if (selection.Any())
		{
			PageMediaRequest.Sort = new List<MediaSort>();
			PageMediaRequest.Sort.AddRange(selection.Select(x => (MediaSort)Enum.Parse(typeof(MediaSort), x)).ToList());
		}
		else
		{
			PageMediaRequest.Sort = null;
		}
	}
	private async Task OnSelectionMediaGenre(ChangeEventArgs eventArgs)
	{
		var selection = await GetSelections(_selectMediaSort);
		if (selection.Any())
		{
			PageMediaRequest.GenreIn = new List<string>();
			PageMediaRequest.GenreIn.AddRange(selection.Select(x => x).ToList());
		}
		else
		{
			PageMediaRequest.GenreIn = null;
		}
	}
	private async Task OnSelectionMediaTag(ChangeEventArgs eventArgs)
	{
		var selection = await GetSelections(_selectMediaSort);
		if (selection.Any())
		{
			PageMediaRequest.TagIn = new List<string>();
			PageMediaRequest.TagIn.AddRange(selection.Select(x => x).ToList());
		}
		else
		{
			PageMediaRequest.TagIn = null;
		}
	}
	private void SetBoolTrueOrNull()
	{
		_showList = !_showList;
		PageMediaRequest.OnList = PageMediaRequest.OnList == null ? true : PageMediaRequest.OnList == false ? true : (bool?)null;
		if (_hideList)
			_hideList = false;
	}

	private void SetBoolFalseOrNull()
	{
		_hideList = !_hideList;
		PageMediaRequest.OnList = PageMediaRequest.OnList == null ? false : PageMediaRequest.OnList == true ? false : (bool?)null;
		if (_showList)
			_showList = false;
	}
	// private async Task OnSelectionEnum<T>(Func<PageMediaRequest, List<T>?> selector)
	// {
	// 	var selection = await GetSelections(_selectMediaStatus);
	// 	var collection = selector.Invoke(PageMediaRequest);
	// 	collection.AddRange(selection.Select(x => (T)Enum.Parse(typeof(T), x)).ToList());

	// }
	public async Task<HashSet<string>> GetSelections(ElementReference elementReference)
	{
		return (await JS.InvokeAsync<List<string>>("getSelectedValues", elementReference)).ToHashSet();
	}
}