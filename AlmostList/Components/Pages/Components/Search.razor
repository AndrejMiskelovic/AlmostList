@using AlmostList.Client.Models
@using AlmostList.Client.Models.Enums
@using AlmostList.Client.Models.Requests
@using System.Collections
@using AlmostList.Utils
@inject IJSRuntime JS;
<CascadingValue Value="this">
	<label>Format</label>
	<select multiple @ref="_selectMediaFormat" @onchange="OnSelectionMediaFormat">
		@foreach (MediaFormat format in Enum.GetValues(typeof(MediaFormat)).Cast<MediaFormat>().Where(role => MediaFormat.MUSIC >= role))
		{
			<option value="@format">@format.GetDisplayName()</option>
		}
	</select>
	<label>Status</label>
 	<select multiple @ref="_selectMediaStatus" @onchange="OnSelectionMediaStatus">
		@foreach (MediaStatus status in Enum.GetValues(typeof(MediaStatus)))
		{
			<option value="@status">@status.GetDisplayName()</option>
		}
	</select> 
	<label>Season</label>
	<select @bind="PageMediaRequest.Season">
		<option selected value="">Any</option>
		@foreach (MediaSeason status in Enum.GetValues(typeof(MediaSeason)))
		{
			<option value="@status">@status.GetDisplayName()</option>
		}
	</select>
@* 	<select multiple @ref="_selectReference" @onchange="OnSelectionChanged">
		@foreach (var country in Enum.GetValues(typeof(Country)))
		{

			<option value="@country">@country</option>
		}
	</select> *@
</CascadingValue>

@code {

	[Parameter]
	public PageMediaRequest PageMediaRequest { get; set; } = new PageMediaRequest();

	private ElementReference _selectMediaFormat;
	private ElementReference _selectMediaStatus;
	private ElementReference _selectMediaSeason;

	//select change event.
	private async Task OnSelectionMediaFormat(ChangeEventArgs eventArgs)
	{

		var selection = await GetSelections(_selectMediaFormat);
		if (selection.Any())
		{
			PageMediaRequest.FormatIn = new List<MediaFormat>();
			PageMediaRequest.FormatIn.AddRange(selection.Select(x => (MediaFormat)Enum.Parse(typeof(MediaFormat), x)).ToList());
		}
		else
		{
			PageMediaRequest.FormatIn = null;
		}
	}
	private async Task OnSelectionMediaStatus(ChangeEventArgs eventArgs)
	{
		var selection = await GetSelections(_selectMediaStatus);
		if (selection.Any())
		{
			PageMediaRequest.StatusIn = new List<MediaStatus>();
			PageMediaRequest.StatusIn.AddRange(selection.Select(x => (MediaStatus)Enum.Parse(typeof(MediaStatus), x)).ToList());
		}
		else
		{
			PageMediaRequest.StatusIn = null;
		}

	}
	// private async Task OnSelectionEnum<T>(Func<PageMediaRequest, List<T>?> selector)
	// {
	// 	var selection = await GetSelections(_selectMediaStatus);
	// 	var collection = selector.Invoke(PageMediaRequest);
	// 	collection.AddRange(selection.Select(x => (T)Enum.Parse(typeof(T), x)).ToList());

	// }
	public async Task<HashSet<string>> GetSelections(ElementReference elementReference)
	{
		return (await JS.InvokeAsync<List<string>>("getSelectedValues", elementReference)).ToHashSet();
	}



}