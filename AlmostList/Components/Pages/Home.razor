@page "/"
@using AlmostList.Client
@using AlmostList.Client.Models.Enums
@using AlmostList.Client.Models.Properties.Media
@using AlmostList.Client.Models.Requests
@using AlmostList.Client.Models.Responses
@using AlmostList.Client.Objects.Responses
@using AlmostList.Components.Pages.Components
@using GraphQL
@inject NavigationManager UriHelper
@inject BaseClient baseClient


@if (render)
{
	<card>
		<div class="main header">
			<img class="coverImage" src="@baseClient.CurrentUser.Viewer.Avatar.Medium" />
			<div class="headerInfo">
				<text class="title">@baseClient.CurrentUser.Viewer.Name</text>
			</div>
		</div>
	</card>
	<br />
	<br />
	<br />
	<div class="activityBtn">
		<button class="btn btn-primary" @onclick="Logout">Logout</button>
		<button class="btn btn-primary" @onclick="Calendar">Calendar</button>
	</div>
}
@if (!render)
{
	<div class="activityBtn login">
		<button class="btn btn-primary" @onclick="Login">Login with AniList</button>
		<button class="btn btn-primary" @onclick="Calendar">Calendar</button>
	</div>
}

@if (RenderAnimeTrending)
{
	<div class="mainPageCarouselWrapper">
		<div class="mediaInfoLabel">Trending Anime</div>
		<div class="mediaBanners">
			<div class="mediaBannersScroll">

				@foreach (var item in PageMediaResponseAnimeTrending.Data.Page.Media)
				{
					<div class="mediaBanner" @onclick="(() => OpenMedia(item.Id))">
						<div class="overlay" style="background-color: @item.CoverImage.Color">
							<img src="@item.BannerImage" />
							<div class="inception">
								<img src="@item.CoverImage.ExtraLarge" />
							</div>
							<div class="mediaBannerTitle"> @item.Title.UserPreferred</div>
						</div>
						<div class="mediaBannerType"> @((MarkupString)item.Description)</div>
					</div>
				}
			</div>
		</div>
	</div>
}
@if (RenderMangaTrending)
{
	<div class="mainPageCarouselWrapper">
		<div class="mediaInfoLabel">Trending Manga</div>
		<div class="mediaBanners">
			<div class="mediaBannersScroll">

				@foreach (var item in PageMediaResponseMangaTrending.Data.Page.Media)
				{
					<div class="mediaBanner" @onclick="(() => OpenMedia(item.Id))">
						<div class="overlay" style="background-color: @item.CoverImage.Color">
							<img src="@item.BannerImage" />
							<div class="inception">
								<img src="@item.CoverImage.ExtraLarge" />
							</div>
							<div class="mediaBannerTitle"> @item.Title.UserPreferred</div>
						</div>
						<div class="mediaBannerType"> @((MarkupString)item.Description)</div>
					</div>
				}
			</div>
		</div>
	</div>
}
@if (RenderNewAddedAnime)
{
	<div class="mainPageCarouselWrapper">
		<div class="mediaInfoLabel">Newly Added Anime</div>
		<div class="mediaBanners">
			<div class="mediaBannersScroll">

				@foreach (var item in PageMediaResponseNewAddedAnime.Data.Page.Media)
				{
					<div class="mediaBanner" @onclick="(() => OpenMedia(item.Id))">
						<div class="overlay" style="background-color: @item.CoverImage.Color">
							<img src="@item.BannerImage" />
							<div class="inception">
								<img src="@item.CoverImage.ExtraLarge" />
							</div>
							<div class="mediaBannerTitle"> @item.Title.UserPreferred</div>
						</div>
						<div class="mediaBannerType"> @((MarkupString)item.Description)</div>
					</div>
				}
			</div>
		</div>
	</div>
}
@if (RenderNewAddedManga)
{
	<div class="mainPageCarouselWrapper">
		<div class="mediaInfoLabel">Newly Added Manga</div>
		<div class="mediaBanners">
			<div class="mediaBannersScroll">

				@foreach (var item in PageMediaResponseNewAddedManga.Data.Page.Media)
				{
					<div class="mediaBanner" @onclick="(() => OpenMedia(item.Id))">
						<div class="overlay" style="background-color: @item.CoverImage.Color">
							<img src="@item.BannerImage" />
							<div class="inception">
								<img src="@item.CoverImage.ExtraLarge" />
							</div>
							<div class="mediaBannerTitle"> @item.Title.UserPreferred</div>
						</div>
						<div class="mediaBannerType"> @((MarkupString)item.Description)</div>
					</div>
				}
			</div>
		</div>
	</div>
}






@code {

	int clientId = 15602;
	bool render = false;
	bool RenderAnimeTrending = false;
	bool RenderMangaTrending = false;
	bool RenderNewAddedAnime = false;
	bool RenderNewAddedManga = false;
	string? oauthToken;

	GraphQLResponse<PageResponse<PagedMedia>> PageMediaResponseAnimeTrending = new GraphQLResponse<PageResponse<PagedMedia>>();
	GraphQLResponse<PageResponse<PagedMedia>> PageMediaResponseMangaTrending = new GraphQLResponse<PageResponse<PagedMedia>>();
	GraphQLResponse<PageResponse<PagedMedia>> PageMediaResponseNewAddedAnime = new GraphQLResponse<PageResponse<PagedMedia>>();
	GraphQLResponse<PageResponse<PagedMedia>> PageMediaResponseNewAddedManga = new GraphQLResponse<PageResponse<PagedMedia>>();

	public override async Task SetParametersAsync(ParameterView parameters)
	{
		string? oauthToken = await SecureStorage.Default.GetAsync("oauth_token");
		if (!string.IsNullOrEmpty(oauthToken))
		{
			if (baseClient.CurrentUser == null)
			{
				baseClient.SetToken(oauthToken);
				await baseClient.GetCurrentUser();
			}

			render = true;
			StateHasChanged();
		}

		AnimeTrending();
		MangaTrending();
		NewAddedAnime();
		NewAddedManga();

	}
	private void OpenMedia(int id)
	{
		UriHelper.NavigateTo($"/Media/{id}");
	}
	private async void AnimeTrending()
	{
		PageMediaRequest pageMediaRequest = new PageMediaRequest();
		pageMediaRequest.Type = MediaType.ANIME;

		PageMediaResponseAnimeTrending = await baseClient.GetPageMedia(pageMediaRequest);
		RenderAnimeTrending = true;
		StateHasChanged();
	}
	private async void MangaTrending()
	{
		PageMediaRequest pageMediaRequest = new PageMediaRequest();
		pageMediaRequest.Type = MediaType.MANGA;

		PageMediaResponseMangaTrending = await baseClient.GetPageMedia(pageMediaRequest);
		RenderMangaTrending = true;
		StateHasChanged();
	}
	private async void NewAddedAnime()
	{
		PageMediaRequest pageMediaRequest = new PageMediaRequest();
		pageMediaRequest.Type = MediaType.ANIME;
		pageMediaRequest.Sort = new List<MediaSort> { MediaSort.ID_DESC };

		PageMediaResponseNewAddedAnime = await baseClient.GetPageMedia(pageMediaRequest);
		RenderNewAddedAnime = true;
		StateHasChanged();
	}
	private async void NewAddedManga()
	{
		PageMediaRequest pageMediaRequest = new PageMediaRequest();
		pageMediaRequest.Type = MediaType.MANGA;
		pageMediaRequest.Sort = new List<MediaSort> { MediaSort.ID_DESC };

		PageMediaResponseNewAddedManga = await baseClient.GetPageMedia(pageMediaRequest);
		RenderNewAddedManga = true;
		StateHasChanged();
	}
	private void Calendar()
	{
		UriHelper.NavigateTo($"/Calendar");
	}
	public async void Login()
	{
		try
		{
			WebAuthenticatorResult authResult = await WebAuthenticator.Default.AuthenticateAsync(
				new WebAuthenticatorOptions()
					{
						Url = new Uri($"https://anilist.co/api/v2/oauth/authorize?client_id={clientId}&response_type=token"),
						CallbackUrl = new Uri("myapp://"),
						PrefersEphemeralWebBrowserSession = true
					});

			baseClient.SetToken(authResult?.AccessToken);
			await SecureStorage.Default.SetAsync("oauth_token", authResult?.AccessToken);


			await baseClient.GetCurrentUser();
			render = true;
			StateHasChanged();

		}
		catch (Exception ex)
		{
			// An unexpected error occurred. No browser may be installed on the device.
		}
	}
	public async void Logout()
	{
		try
		{
			SecureStorage.Default.Remove("oauth_token");

			baseClient.RemoveTokenAndUser();
			render = false;
			StateHasChanged();
		}
		catch (Exception ex)
		{
			// An unexpected error occurred. No browser may be installed on the device.
		}
	}
}
