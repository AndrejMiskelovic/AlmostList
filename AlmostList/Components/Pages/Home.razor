@page "/"
@using AlmostList.Client
@using AlmostList.Client.Models.Enums
@using AlmostList.Client.Objects.Responses
@using GraphQL
@inject NavigationManager UriHelper
@inject BaseClient baseClient

@if (@render)
{
	<card>
		<div class="header">
			<img class="coverImage" src="@viewerResponse.Data.Viewer.Avatar.Medium" />
			<div class="headerInfo">
				<text class="title">@viewerResponse.Data.Viewer.Name</text>
			</div>
		</div>
	</card>
}

<label for="id">ID of media:</label>
<input type="number" id="id" name="id" @bind="@Id">
<button class="btn btn-primary" @onclick="OnClick">Media</button>
<button class="btn btn-primary" @onclick="Search">Search</button>
<button class="btn btn-primary" @onclick="Search2">PageMediaWithTabs</button>
<button class="btn btn-primary" @onclick="Search3">PageMediaWithTabs2</button>
<button class="btn btn-primary" @onclick="Search4">PageMediaWithTabs3</button>
<button class="btn btn-primary" @onclick="OnClick3">User</button>
<button class="btn btn-primary" @onclick="Calendar">Calendar</button>
<button class="btn btn-primary" @onclick="Login">Login with AniList</button>

@code {
	string url = "https://anilist.co/api/v2/oauth/authorize";
	int clientId = 15602;
	int? Id { get; set; }
	int? type { get; set; }
	bool render = false;
	GraphQLResponse<ViewerResponse> viewerResponse = new GraphQLResponse<ViewerResponse>();

	private void OnClick()
	{
		UriHelper.NavigateTo($"/Media/{129188}");
	}
	private void Calendar()
	{
		UriHelper.NavigateTo($"/Calendar");
	}
	private void Search()
	{
		UriHelper.NavigateTo($"/PageMedia");
	}
	private void Search2()
	{
		UriHelper.NavigateTo($"/PageMediaWithTabs");
	}
	private void Search3()
	{
		UriHelper.NavigateTo($"/PageMediaWithTabs2");
	}
	private void Search4()
	{
		UriHelper.NavigateTo($"/PageMediaWithTabs3");
	}
	private void OnClick3()
	{
		UriHelper.NavigateTo($"/UserMain/{Id}");
	}
	private async void Login()
	{

		try
		{
			// Uri uri = new Uri($"https://anilist.co/api/v2/oauth/authorize?client_id={clientId}&response_type=token");
			// BrowserLaunchOptions options = new BrowserLaunchOptions()
			//     {
			//         LaunchMode = BrowserLaunchMode.SystemPreferred,
			//         TitleMode = BrowserTitleMode.Show,
			//         PreferredToolbarColor = Colors.Black,
			//         PreferredControlColor = Colors.SandyBrown
			//     };
			
			// await Browser.Default.OpenAsync(uri, options);

			WebAuthenticatorResult authResult = await WebAuthenticator.Default.AuthenticateAsync(
				new WebAuthenticatorOptions()
					{
						Url = new Uri($"https://anilist.co/api/v2/oauth/authorize?client_id={clientId}&response_type=token"),
						CallbackUrl = new Uri("myapp://"),
						PrefersEphemeralWebBrowserSession = true
					});

			baseClient.SetToken(authResult?.AccessToken);


			viewerResponse = await baseClient.GetCurrentUser();
			render = true;
			StateHasChanged();

		}
		catch (Exception ex)
		{
			// An unexpected error occurred. No browser may be installed on the device.
		}
	}
}