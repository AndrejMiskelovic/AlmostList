@page "/"
@using AlmostList.Client
@using AlmostList.Client.Models.Enums
@using AlmostList.Client.Models.Properties.Media
@using AlmostList.Client.Objects.Responses
@using AlmostList.Components.Pages.Components
@using GraphQL
@inject NavigationManager UriHelper
@inject BaseClient baseClient

@if (render)
{
	<card>
		<div class="header">
			<img class="coverImage" src="@viewerResponse.Viewer.Avatar.Medium" />
			<div class="headerInfo">
				<text class="title">@viewerResponse.Viewer.Name</text>
			</div>
		</div>
	</card>
	<br />
	<br />
	<br />
	<button class="btn btn-primary" @onclick="Logout">Logout</button>

}
@if (!render)
{
	<button class="btn btn-primary" @onclick="Login">Login with AniList</button>
}
<button class="btn btn-primary" @onclick="Calendar">Calendar</button>




@code {

	int clientId = 15602;
	bool render = false;
	string? oauthToken;
	ViewerResponse viewerResponse = new ViewerResponse();

	public override async Task SetParametersAsync(ParameterView parameters)
	{
		if (viewerResponse.Viewer == null)
		{

			string oauthToken = await SecureStorage.Default.GetAsync("oauth_token");
			if (oauthToken != null)
			{
				if (baseClient.CurrentUser == null)
				{
					baseClient.SetToken(oauthToken);
					var response = await baseClient.GetCurrentUser();
				}
				viewerResponse = baseClient.CurrentUser;
				render = true;
			}
			StateHasChanged();
		}
	}

	private void Calendar()
	{
		UriHelper.NavigateTo($"/Calendar");
	}
	public async void Login()
	{
		try
		{
			WebAuthenticatorResult authResult = await WebAuthenticator.Default.AuthenticateAsync(
				new WebAuthenticatorOptions()
					{
						Url = new Uri($"https://anilist.co/api/v2/oauth/authorize?client_id={clientId}&response_type=token"),
						CallbackUrl = new Uri("myapp://"),
						PrefersEphemeralWebBrowserSession = true
					});

			baseClient.SetToken(authResult?.AccessToken);
			await SecureStorage.Default.SetAsync("oauth_token", authResult?.AccessToken);


			var response = await baseClient.GetCurrentUser();
			viewerResponse = response.Data;
			render = true;
			StateHasChanged();

		}
		catch (Exception ex)
		{
			// An unexpected error occurred. No browser may be installed on the device.
		}
	}
	public async void Logout()
	{
		try
		{
			SecureStorage.Default.Remove("oauth_token");

			baseClient.RemoveToken();
			viewerResponse = null;
			render = false;
			StateHasChanged();
		}
		catch (Exception ex)
		{
			// An unexpected error occurred. No browser may be installed on the device.
		}
	}
}
