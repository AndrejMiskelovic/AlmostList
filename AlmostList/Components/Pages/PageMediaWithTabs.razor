@page "/PageMediaWithTabs"

@using AlmostList.Client
@using AlmostList.Client.Models
@using AlmostList.Client.Models.Enums
@using AlmostList.Client.Models.Responses
@using AlmostList.Client.Models.Requests
@using GraphQL
@using Newtonsoft.Json
@inject NavigationManager UriHelper
@inject BaseClient baseClient

@* <label for="id">ID of media:</label>
<input type="number" id="id" name="id" @bind="@searchText">

<label for="cars">Choose a car:</label>
 @if (search == 1)
{ 
	<select>

		@foreach (var item in AllAllowedRoles(MediaSeason.SPRING))
		{
			<option value="@item">@item</option>
		}
		foreach (GameObjectType type in Enum.GetValues(typeof(GameObjectType))
	{
	...
	}
</select> 
} 
 <div class='pageMedia'>

@if (@render)
{
	@foreach (var item in @PageMediaResponse.Data.Page.Media)
	{

		<div class="mediaCard" @onclick="(() => OpenMedia(item.Id))">
			<img src="@item.CoverImage.Medium" />
			<div class="mediaInfo">
				<div class="title">
					@item.Title.UserPreferred
				</div>
			</div>
		</div>

	}
}
</div>
 *@
<script>
	$(document).ready(function () {
		$('ul.tabs').tabs({
			swipeable: true,
			responsiveThreshold: 1920
		});
	});
</script>



<Tabs TextFilling2="@text2" OnTabChanged="OnTabChanged">
	<Tab Text="Tab 1" Value="Tab1">

			<div class='pageMedia'>

				@if (@render)
				{
					@foreach (var item in @PageMediaResponse.Data.Page.Media)
					{

						<div class="mediaCard" @onclick="(() => OpenMedia(item.Id))">
							<img src="@item.CoverImage.Medium" />
							<div class="mediaInfo">
								<div class="title">
									@item.Title.UserPreferred
								</div>
							</div>
						</div>

					}
				}
			</div>
		
	</Tab>
	<Tab Text="Tab 2" Value="Tab2">
		<h2>Content Tab 2</h2>
		<p>
			This is the content for the Tab 2. It is enabled.
		</p>
	</Tab>
	<Tab Text="Tab 3" Value="Tab3">
		<h2>Content Tab 3</h2>
		<p>
			This is the content for the Tab 3. It is enabled.
		</p>
	</Tab>
	<Tab Text="Tab 4" Enabled="@IsEnabled" Value="Tab4">
		<h2>Content Tab 4</h2>
		<p>
			This is the content for the Tab 4. It is disabled if <i>IsEnabled = false</i>
		</p>
	</Tab>
</Tabs>





@code {
	public string text1 = "Text on the left";
	public string text2 = "Text on the right";

	public bool IsEnabled = false;

	public async Task OnTabChanged(Tab tab)
	{
		text1 = $"Tab value: {tab.Value}";
		text2 = $"Tab text: {tab.Text}";
	}

	[Parameter]
	public int search { get; set; }
	private IEnumerable<MediaSeason> AllAllowedRoles(MediaSeason season)
	{
		return Enum.GetValues(typeof(MediaSeason)).Cast<MediaSeason>().Where(role => season >= role);
	}

	private void OpenMedia(int id)
	{
		UriHelper.NavigateTo($"/Media/{id}");
	}

	string? searchText = null;
	bool render = false;
	GraphQLResponse<PageResponse<PagedMedia>> PageMediaResponse = new GraphQLResponse<PageResponse<PagedMedia>>();
	PageMediaRequest pageMediaRequest = new PageMediaRequest();
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		Console.WriteLine(search);
		if (firstRender)
		{
			var variables = new PageMediaRequest
				{
					Page = 1,
					Search = searchText,
					Type = MediaType.MANGA
				};
			PageMediaResponse = await baseClient.GetPageMedia(variables);
			render = true;
			StateHasChanged();
		}
	}
}
