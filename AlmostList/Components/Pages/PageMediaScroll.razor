@page "/PageMediaScroll"

@using AlmostList.Client
@using AlmostList.Client.Models
@using AlmostList.Client.Models.Enums
@using AlmostList.Client.Models.Responses
@using AlmostList.Client.Models.Requests
@using GraphQL
@using Newtonsoft.Json
@using Sve.Blazor.InfiniteScroll.Components
@inject NavigationManager UriHelper
@inject BaseClient baseClient

<label for="id">ID of media:</label>
<input type="number" id="id" name="id" @bind="@searchText">

<label for="cars">Choose a car:</label>
@* @if (search == 1)
{ *@
<select>
	<option value="nissan">nissan epta</option>

	<option value="ferrari">gazel</option>
	@foreach (var item in AllAllowedRoles(MediaSeason.SPRING))
	{
		<option value="@item">@item</option>
	}
</select>

<div class="pageMedia">

	@if (@render)
	{
		<InfiniteScroll ObserverTargetId="observerTarget" ObservableTargetReached="(e) => PageMediaResponse.Data.Page.PageInfo.CurrentPage <= PageMediaResponse.Data.Page.PageInfo.LastPage ? FetchPageData() : null">
		
				@foreach (var item in @PageMediaResponse.Data.Page.Media)
				{
					<div class="list-group-item mediaCard" @onclick="(() => OpenMedia(item.Id))">
						<img src="@item.CoverImage.Medium" />
						<div class="mediaInfo">
							<div class="title">
								@item.Title.UserPreferred
							</div>
						</div>
					</div>
				}
				<div id="observerTarget"/>
		</InfiniteScroll>
	}
</div>
@code {
	[Parameter]
	public int search { get; set; }
	private IEnumerable<MediaSeason> AllAllowedRoles(MediaSeason season)
	{
		return Enum.GetValues(typeof(MediaSeason)).Cast<MediaSeason>().Where(role => season >= role);
	}

	private void OpenMedia(int id)
	{
		UriHelper.NavigateTo($"/Media/{id}");
	}

	string? searchText = null;
	bool render = false;
	GraphQLResponse<PageResponse<PagedMedia>> PageMediaResponse = new GraphQLResponse<PageResponse<PagedMedia>>();
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		Console.WriteLine(search);
		if (firstRender)
		{
			var variables = new PageMediaRequest
				{
					Page = 1,
					Type = MediaType.ANIME
				};
			PageMediaResponse = await baseClient.GetPageMedia(variables);
			render = true;
			StateHasChanged();
		}
	}

	private async Task FetchPageData()
	{
		var variables = new PageMediaRequest
			{
				Page = PageMediaResponse.Data.Page.PageInfo.CurrentPage.Value + 1,
				Type = MediaType.ANIME
			};
		var a = await baseClient.GetPageMedia(variables);
		PageMediaResponse.Data.Page.Media.AddRange(a.Data.Page.Media.ToArray());
		PageMediaResponse.Data.Page.PageInfo = a.Data.Page.PageInfo;
	}
}
