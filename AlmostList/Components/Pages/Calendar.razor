@page "/Calendar"
@using AlmostList.Client
@using AlmostList.Client.Models.Responses
@using AlmostList.Client.Objects.Responses
@using AlmostList.Utils
@using GraphQL
@inject BaseClient baseClient
@inject NavigationManager UriHelper


<div class="pageMedia">
	@if (render)
	{

		@foreach (var item in ScheduleResponse.Data.Page.AiringSchedules)
		{
			@if (showMylist && item.Media.MediaListEntry == null)
			{
				continue;
			}
			<div class="mediaCard" @onclick="(() => OpenMedia(item.Media.Id))">
				<img src="@item.Media.CoverImage.Large" />
				<div class="calendarInfo">

					@if (item.Media.MediaListEntry != null)
					{
						<div class="calendarType">
							@item.Media.MediaListEntry.Status.GetDisplayName()
						</div>
					}
					<div>

						@item.GetAiringAt().Value.ToShortTimeString()
					</div>
				</div>
				<div class="pageMediaInfo">
					<div class="title">
						@item.Media.Title.UserPreferred
					</div>
				</div>
			</div>

		}
		<InputDate class="calendarInput" ValueExpression="@(()=>dateTime)"
				   Value="dateTime"
				   ValueChanged="@((DateTime value) => GetData(value))" />
		@if (baseClient.CurrentUser != null)
		{
			<div class="listWrapper">
				<InputCheckbox id="listCheckbox" a ValueExpression="@(()=> showMylist)" Value="showMylist" ValueChanged="ShowMyList" />
				<label for="listCheckbox">Show only from my list</label>
			</div>
		}
	}
</div>


@code {
	bool render = false;
	bool showMylist = false;
	DateTime dateTime { get; set; }
	GraphQLResponse<PageResponse<PagedAirSchedule>> ScheduleResponse = new GraphQLResponse<PageResponse<PagedAirSchedule>>();

	private void OpenMedia(int id)
	{
		UriHelper.NavigateTo($"/Media/{id}");
	}

	private void ShowMyList()
	{
		showMylist = !showMylist;
		StateHasChanged();
	}

	private async Task GetData(DateTime date)
	{
		dateTime = date;
		ScheduleResponse = await baseClient.GetPageAiringSchedule((int)UnixTimeConverter.ConvertToUnixTimestamp(date), (int)UnixTimeConverter.ConvertToUnixTimestamp(date.AddDays(1)));
		render = true;
		StateHasChanged();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			dateTime = DateTime.Now.Date;
			GetData(dateTime);

		}

	}
}
