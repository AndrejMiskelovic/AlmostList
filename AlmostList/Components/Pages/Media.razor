@page "/Media/{Id:int}"

@using AlmostList.Client
@using System.Text.Json;
@using AlmostList.Client.Models
@using AlmostList.Client.Models.Properties.Media
@using AlmostList.Client.Models.Requests
@using AlmostList.Client.Models.Responses
@using GraphQL
@using Newtonsoft.Json
@using AlmostList.Components.Pages.Components
@using AlmostList.Utils
@inject BaseClient baseClient
@* @inject IJSRuntime JsRuntime*@
@inject NavigationManager UriHelper


@if (render)
{
		<div class="header">
			<img class="bannerimage" src="@mediaResponse.Data.Media.BannerImage" />
			<img class="coverImage" src="@mediaResponse.Data.Media.CoverImage.ExtraLarge" />
			<div class="headerInfo">
				<text class="title">@mediaResponse.Data.Media.Title.English </text>

					<Popup @ref="popupRef">
						<MediaEntry MediaList="@mediaList" MaxEpisodes="mediaResponse.Data.Media.Episodes"></MediaEntry>
					</Popup>
					<button @onclick="PopupClick">@(mediaResponse.Data.Media.MediaListEntry == null ? "Add to List" : @mediaResponse.Data.Media.MediaListEntry.Status.GetDisplayName())</button>
				
			</div>
		</div>
		@if (mediaResponse.Data.Media.NextAiringEpisode != null)
		{
			<div class="episodeRow">
				Ep. @mediaResponse.Data.Media.NextAiringEpisode.Episode:  @mediaResponse.Data.Media.NextAiringEpisode.GetAiringAt()
			</div>
		}
		<div class="infoRow">
			<div class="scoreCard">
				<labal>Score</labal>
				<div class="row">
					<div class="scoreLable">Average</div>
					<div class="score">@mediaResponse.Data.Media.AverageScore</div>
				</div>
				<div class="row">
					<div class="scoreLable">Mean</div>
					<div class="score">@mediaResponse.Data.Media.MeanScore</div>
				</div>
			</div>

			<div class="scoreCard">
				@mediaResponse.Data.Media.Format.GetDisplayName()
				@mediaResponse.Data.Media.Episodes Episodes
				@mediaResponse.Data.Media.SeasonYear
				@mediaResponse.Data.Media.Season
			</div>
		</div>
		
		<div class="mediaInfoLabel">Description</div>
		<div @onclick="(() => ToggleCollapse(ref showDescription))" class="@(showDescription ? "" : "show") mediaPseudoCollapse">@((MarkupString)mediaResponse.Data.Media.Description) <div class="arrow">➤</div></div>

		<div class="mediaInfoLabel">Info</div>
		<div class="mediaInfo">
			<div class="col">

  				<TextMediaInfoRow Data="@mediaResponse.Data.Media.Format.GetDisplayName()" Text="Format"/>
				
				<TextMediaInfoRow Data="@mediaResponse.Data.Media.Episodes.ToString()" Text="Episodes"/>
				
				<TextMediaInfoRow Data="@mediaResponse.Data.Media.Duration.ToString()" Text="Episodes Duration"/>  
				
				 <TextMediaInfoRow Data="@mediaResponse.Data.Media.Chapters.ToString()" Text="Chapters"/> 
				
			 	<TextMediaInfoRow Data="@mediaResponse.Data.Media.Source.GetDisplayName()" Text="Source"/>
				
				<TextMediaInfoRow Data="@mediaResponse.Data.Media.Status.GetDisplayName()" Text="Status"/>
				
				<TextMediaInfoRow Data="@mediaResponse.Data.Media.StartDate.TryParseToDateTime()" Text="Start Date"/>
				
				<TextMediaInfoRow Data="@mediaResponse.Data.Media.EndDate.TryParseToDateTime()" Text="End Date"/>

				<TextMediaInfoRow Data="@Concatinate(new string[] {mediaResponse.Data.Media.Season.GetDisplayName(), mediaResponse.Data.Media.SeasonYear.ToString()})" Text="Season"/>

				<TextMediaInfoRow Data="@mediaResponse.Data.Media.AverageScore.ToString()" Text="Average Score"/>
				
				<TextMediaInfoRow Data="@mediaResponse.Data.Media.MeanScore.ToString()" Text="Mean Score"/>
				
				<TextMediaInfoRow Data="@mediaResponse.Data.Media.Popularity.ToString()" Text="Popularity"/>   
				
				@if (!mediaResponse.Data.Media.IsFavouriteBlocked)
				{
					<TextMediaInfoRow Data="@mediaResponse.Data.Media.Favourites.ToString()" Text="Favourites"/> 
				}

				<TextMediaInfoRowArray Data="@mediaResponse.Data.Media.Studios.Edges.Where(x => x.IsMain == true).Select(x=>x.Node.Name).ToList()" Text="Studios"/> 
				<TextMediaInfoRowArray Data="@mediaResponse.Data.Media.Studios.Edges.Where(x => x.IsMain == false).Select(x=>x.Node.Name).ToList()" Text="Producers"/> 
				
				<TextMediaInfoRowArray Data="@mediaResponse.Data.Media.Genres" Text="Genres"/> 

				<TextMediaInfoRow Data="@mediaResponse.Data.Media.Title.Romaji.ToString()" Text="Romaji"/>
				<TextMediaInfoRow Data="@mediaResponse.Data.Media.Title.English.ToString()" Text="English"/>
				<TextMediaInfoRow Data="@mediaResponse.Data.Media.Title.Native.ToString()" Text="Native"/>
				
				<TextMediaInfoRowArray Data="@mediaResponse.Data.Media.Synonyms" Text="Synonyms"/> 

			</div>
			<div class="col">
				<div class="row">
					<div>Tags</div>
				@foreach (var item in mediaResponse.Data.Media.Tags)
				{
					@* TODO <div hidden="@item.IsMediaSpoiler ? true : @item.IsGeneralSpoiler ? true : false"> *@
					<div class="mediaTags">
						<div>@item.Name</div
						<div>@item.Rank%</div>
					</div>
					@* </div> *@
				}
				</div>
			</div>
		</div>
	

		<div class="mediaInfoLabel">Relations</div>
		<div class="mediaBanners">
		<div class="mediaBannersScroll">

		@foreach (var item in mediaResponse.Data.Media.Relations.Edges.OrderBy(x => x.RelationType))
		{
			<div class="mediaBanner" @onclick="(() => OpenMedia(item.Node.Id))" >
				<img src="@item.Node.CoverImage.ExtraLarge" />
				<div class="mediaBannerTitle"> @item.Node.Title.UserPreferred</div>
				<div class="mediaBannerType"> @item.RelationType.GetDisplayName()</div>
			</div>
		}
		</div>
		</div>

		<div class="mediaInfoLabel">Characters</div>
		<div class="mediaStaffs">

			@foreach (var item in mediaResponse.Data.Media.Characters.Edges.Take(3))
			{			
				<div class="mediaStaff">
					<img src="@item.Node.Image.Large" />
					<div>@item.Node.Name.UserPreferred</div>	
					<div>@item.Role.GetDisplayName()</div>	
				</div>
			}
				<div class="staffMore">See more</div>
		</div>
			
		<div class="mediaInfoLabel">Staff</div>
		<div class="mediaStaffs">

			@foreach (var item in mediaResponse.Data.Media.Staff.Edges.Take(3))
			{			
				<div class="mediaStaff">
					<img src="@item.Node.Image.Large" />
					<div>@item.Node.Name.UserPreferred</div>	
					<div>@item.Role</div>	
				</div>
			}
				<div class="staffMore">See more</div>
		</div>
		
		@* <iframe src="@PrepareYoutubeLink()"/> *@

	<div class="mediaInfoLabel">Recommendations</div>
	<div class="mediaRecommendations">

		<div class="mediaRecommendationsScroll">
		@foreach (var item in mediaResponse.Data.Media.Recommendations.Nodes)
		{
			@if (!item.MediaRecommendation.IsAdult)
			{
				<div class="mediaRecommendation" @onclick="(() => OpenMedia(item.MediaRecommendation.Id))" >
					<img src="@item.MediaRecommendation.CoverImage.ExtraLarge"/>
					<div class="mediaRecommendationInfo">
						<div>@item.MediaRecommendation.Title.UserPreferred</div>	
						<div>@item.MediaRecommendation.Format.GetDisplayName()</div>	
						<div>@item.MediaRecommendation.Episodes Episodes</div>	
						<div>@item.MediaRecommendation.SeasonYear</div>
					</div>
				</div>
			}
		}
		</div>
	</div>

	<div class="mediaLogo"> 
		@foreach (var item in mediaResponse.Data.Media.ExternalLinks)
		{
			<img src="@item.Icon" href="@item.Url" /> 
		}
	</div>

}

@code {
	[Parameter]
	public int Id { get; set; }
	bool render = false;
	bool showDescription = true;
	GraphQLResponse<MediaResponse> mediaResponse = new GraphQLResponse<MediaResponse>();
	MediaList mediaList = new MediaList();

	private Popup popupRef;

	private void PopupClick()
	{
		// Shows the popup at the center of the screen
		popupRef.Show();
	}
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			mediaResponse = await baseClient.GetMediaWithListEntry(Id);
			if(mediaResponse.Data.Media.MediaListEntry != null)
			{
				mediaList = mediaResponse.Data.Media.MediaListEntry;
			}
			mediaList.MediaId = mediaResponse.Data.Media.Id;
			mediaList.UserId = baseClient.CurrentUser == null ? null : baseClient.CurrentUser.Viewer.Id;
			render = true;
			StateHasChanged();
		}
	}
	private void OpenMedia(int id)
	{
		UriHelper.NavigateTo($"/Media/{id}", true);
	}
	private string Concatinate(string[] strings) => string.Join(" ", strings);
	private void ToggleCollapse(ref bool value) => value = !value;

	private string PrepareYoutubeLink()
	{
		return $"https://www.youtube.com/embed/{mediaResponse.Data.Media.Trailer.Id}";
	}
}
