@page "/PageMedia"

@using AlmostList.Client
@using AlmostList.Client.Models
@using AlmostList.Client.Models.Enums
@using AlmostList.Client.Models.Responses
@using AlmostList.Client.Models.Requests
@using AlmostList.Utils
@using GraphQL
@using Newtonsoft.Json
@using AlmostList.Components.Pages.Components
@using Sve.Blazor.InfiniteScroll.Components
@inject NavigationManager UriHelper
@inject BaseClient baseClient


<Tabs OnTabChanged="OnTabChanged">
	<Popup @ref="popupRef">
		<Search PageMediaRequest="PageMediaRequest" GenresAndTags="TagsAndGenresResponse.Data"></Search>
	</Popup>
	<Tab Text="@MediaType.ANIME.GetDisplayName()" Value="@MediaType.ANIME.ToString()">
		<div class="searchWrapper">
			<input class="searchInput" @bind="PageMediaRequest.Search" />
			<button @onclick="PopupClick" class="searchBtn">Filters</button>
			<button class="searchBtn" @onclick="() => Search(MediaType.ANIME)">Search </button>
		</div>
		<div class="pageMedia">

			@if (@render)
			{
				<InfiniteScroll ObserverTargetId="observerTarget" ObservableTargetReached="(e) => FetchPageData()">

					@foreach (var item in @PageMediaResponse.Data.Page.Media)
					{
						<div class="mediaCard" @onclick="(() => OpenMedia(item.Id))">
							<img src="@item.CoverImage.Large" />
							<div class="pageMediaInfo">
								<div class="title">
									@item.Title.UserPreferred
								</div>
							</div>
						</div>
					}
					<div id="observerTarget" />
				</InfiniteScroll>
			}
		</div>

	</Tab>

	<Tab Text="@MediaType.MANGA.GetDisplayName()" Value="@MediaType.MANGA.ToString()">
		<div class="searchWrapper">
			<input class="searchInput" @bind="PageMediaRequest.Search" />
			<button @onclick="PopupClick" class="searchBtn">Filters</button>
			<button class="searchBtn" @onclick="() => Search(MediaType.MANGA)">Search </button>
		</div>
		<div class="pageMedia">

			@if (@render)
			{
				<InfiniteScroll ObserverTargetId="observerTarget" ObservableTargetReached="(e) => FetchPageData()">

					@foreach (var item in @PageMediaResponse.Data.Page.Media)
					{
						<div class="mediaCard" @onclick="(() => OpenMedia(item.Id))">
							<img src="@item.CoverImage.Large" />
							<div class="pageMediaInfo">
								<div class="title">
									@item.Title.UserPreferred
								</div>
							</div>
						</div>
					}
					<div id="observerTarget" />
				</InfiniteScroll>
			}
		</div>
	</Tab>
</Tabs>


@code {
	[Parameter]
	public int search { get; set; }
	string? searchText = null;
	bool render = false;
	GraphQLResponse<PageResponse<PagedMedia>> PageMediaResponse = new GraphQLResponse<PageResponse<PagedMedia>>();
	GraphQLResponse<GenresAndTagsResponse> TagsAndGenresResponse = new GraphQLResponse<GenresAndTagsResponse>();
	PageMediaRequest PageMediaRequest = new PageMediaRequest();

	private Popup popupRef;

	private void PopupClick()
	{
		// Shows the popup at the center of the screen
		popupRef.Show();
	}
	private void Search(MediaType type)
	{
		PageMediaRequest.Type = type;
		PageMediaRequest.Page = 1;
		render = false;
		MediaRequest();
	}
	private void OpenMedia(int id)
	{
		UriHelper.NavigateTo($"/Media/{id}");
	}

	public async Task OnTabChanged(Tab tab)
	{
		PageMediaRequest = new PageMediaRequest();
		PageMediaRequest.Type = tab == null ? MediaType.ANIME : (MediaType)Enum.Parse(typeof(MediaType), tab.Value);
		render = false;
		MediaRequest();
	}
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			TagAndGenresRequest();
			PageMediaRequest.Type = MediaType.ANIME;
			MediaRequest();
		}
	}
	private async void MediaRequest()
	{
		PageMediaResponse = await baseClient.GetPageMedia(PageMediaRequest);
		render = true;
		StateHasChanged();
	}
	private async void TagAndGenresRequest()
	{
		TagsAndGenresResponse = await baseClient.GetGenresAndTagsCollection();
	}

	private async Task FetchPageData()
	{
		if (PageMediaResponse.Data.Page.PageInfo.CurrentPage < PageMediaResponse.Data.Page.PageInfo.LastPage)
		{
			PageMediaRequest.Page += 1;
			var a = await baseClient.GetPageMedia(PageMediaRequest);
			PageMediaResponse.Data.Page.Media.AddRange(a.Data.Page.Media.ToArray());
			PageMediaResponse.Data.Page.PageInfo = a.Data.Page.PageInfo;
		}
	}
}

